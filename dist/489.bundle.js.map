{"version":3,"sources":["webpack://mobalytics-builds-widget/./src/widget/app/components/overlay/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/compact-skill-priority/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/compact-skill-order-display/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/compact-skill-order/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/compact-skills/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/content-square/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/right-arrow/index.js","webpack://mobalytics-builds-widget/./src/widget/app/styles/components/content-square/index.js"],"names":["LetterOverlayStyles","tw","ContentSquareStyles","letter","wh","children","loading","CompactSkillPriorityStyles","FlexCol","CompactSkillPrioritySmallWhiteText","SmallWhiteText","CompactSkillPriorityRow","FlexRow","RightArrowStyles","RightArrow","squidexApiBuildData","data","championCommonInfo","flatData","abilities","abilitiesRaw","isLoading","useContext","BuildContext","filter","a","activationKey","length","slug","type","map","i","overlay","SkillOrderDisplayStyles","styled","leftSpace","SkillOrderNumberCol","SkillOrderKeyCol","SkillOrderDisplayNumberSmallPurpleText","SmallPurpleText","skillMap","skillOrder","s","number","key","CompactSkillOrderStyles","CompactSkillOrderSmallWhiteText","CompactSkillOrderRow","dataApiBuildData","lol","champion","build","reduce","push","ContentSquareLetterSpan","noBg","rest","className","name","LoadingText","width","height"],"mappings":"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","file":"489.bundle.js","sourcesContent":["import tw from 'twin.macro';\nimport ContentSquareStyles from '../../styles/components/content-square';\n\nconst LetterOverlayStyles = tw(ContentSquareStyles)`flex! justify-center! absolute! bottom-0! right-0!`;\n\nconst LetterOverlay = ({ letter = false, wh = 16, children, loading = true }) => {\n\n    return (\n        <LetterOverlayStyles wh={wh} letter={letter} loading={loading}>\n            {children}\n        </LetterOverlayStyles>\n    );\n};\n\nexport default LetterOverlay;","import SpellItem from '../spell-item';\nimport LetterOverlay from '../overlay';\nimport RightArrow from '../right-arrow';\nimport { useContext } from 'preact/hooks';\nimport { BuildContext } from '../../lib/context';\nimport tw from 'twin.macro';\nimport FlexRow from '../../styles/components/flex-row';\nimport FlexCol from '../../styles/components/flex-col';\nimport SmallWhiteText from '../../styles/components/small-white-text';\n\nconst CompactSkillPriorityStyles = tw(FlexCol)`mr-0 xl:(mr-10)`;\nconst CompactSkillPrioritySmallWhiteText = tw(SmallWhiteText)`uppercase`;\nconst CompactSkillPriorityRow = tw(FlexRow)`pt-2.5`;\nconst RightArrowStyles = tw(RightArrow)`mx-2`;\n\nconst CompactSkillPriority = () => {\n\n    const { squidexApiBuildData: { data: { championCommonInfo: [{ flatData: { abilities: abilitiesRaw = [] } = {} } = {}] = [] } = {} } = {}, loading: isLoading = true } = useContext(BuildContext);\n    const abilities = abilitiesRaw.filter(a => a.flatData.activationKey !== 'PASSIVE');\n    const loading = isLoading || abilities.length === 0;\n\n    return (\n        <CompactSkillPriorityStyles>\n            <CompactSkillPrioritySmallWhiteText>Skill priority</CompactSkillPrioritySmallWhiteText>\n            <CompactSkillPriorityRow>\n                {loading && (\n                    <>\n                        <SpellItem slug={false} wh={32} type=\"skill\" />\n                        <RightArrowStyles />\n                        <SpellItem slug={false} wh={32} type=\"skill\" />\n                        <RightArrowStyles />\n                        <SpellItem slug={false} wh={32} type=\"skill\" />\n                        <RightArrowStyles />\n                        <SpellItem slug={false} wh={32} type=\"skill\" />\n                    </>\n                )}\n                {!loading && abilities.map((a, i) => {\n\n                    const { flatData } = a;\n                    const { activationKey = false, slug = false } = flatData;\n\n                    const overlay = activationKey ? (\n                        <LetterOverlay key={activationKey} letter={activationKey} loading={false}>\n                            {activationKey}\n                        </LetterOverlay>\n                    ) : false;\n\n                    return (\n                        <>\n                            <SpellItem key={activationKey} overlay={overlay} slug={slug} wh={32} type=\"skill\" />\n                            {i !== abilities.length - 1 && (\n                                <RightArrowStyles />\n                            )}\n                        </>\n                    );\n                })}\n            </CompactSkillPriorityRow>\n        </CompactSkillPriorityStyles>\n    );\n};\n\nexport default CompactSkillPriority;","import ContentSquare from '../content-square';\nimport tw, { styled } from 'twin.macro';\nimport FlexRow from '../../styles/components/flex-row';\nimport FlexCol from '../../styles/components/flex-col';\nimport SmallPurpleText from '../../styles/components/small-purple-text';\n\nconst SkillOrderDisplayStyles = styled(FlexCol)(({ leftSpace }) => [\n    tw`items-center`,\n    'large' === leftSpace ? tw`md:(ml-2)` : tw``,\n    'normal' === leftSpace ? tw`md:(ml-1.5)` : tw``,\n    'small' === leftSpace ? tw`md:(ml-1)` : tw``,\n    'very-small' === leftSpace ? tw`md:(ml-0.5)` : tw``,\n]);\nconst SkillOrderNumberCol = tw(FlexRow)`mb-1`;\nconst SkillOrderKeyCol = tw(FlexRow)``;\nconst SkillOrderDisplayNumberSmallPurpleText = tw(SmallPurpleText)`capitalize text-xxs leading-none`;\n\nconst SkillOrderDisplay = ({ skillMap, skillOrder, loading = true }) => {\n\n    return (\n        <>\n            {skillOrder.map((s, i) => {\n                const number = i + 1;\n                const key = skillMap[s - 1];\n                const leftSpace = i !== 0 ? 'small' : false;\n                return (\n                    <SkillOrderDisplayStyles key={number} leftSpace={leftSpace}>\n                        <SkillOrderNumberCol>\n                            <SkillOrderDisplayNumberSmallPurpleText>{number}</SkillOrderDisplayNumberSmallPurpleText>\n                        </SkillOrderNumberCol>\n                        <SkillOrderKeyCol>\n                            <ContentSquare letter={key} wh={20} loading={loading}>\n                                {key}\n                            </ContentSquare>\n                        </SkillOrderKeyCol>\n                    </SkillOrderDisplayStyles>\n                );\n            })}\n        </>\n    );\n};\n\nexport default SkillOrderDisplay;","import { useContext } from 'preact/hooks';\nimport { BuildContext } from '../../lib/context';\nimport tw from 'twin.macro';\nimport FlexRow from '../../styles/components/flex-row';\nimport FlexCol from '../../styles/components/flex-col';\nimport SmallWhiteText from '../../styles/components/small-white-text';\nimport CompactSkillOrderDisplay from '../compact-skill-order-display';\n\nconst CompactSkillOrderStyles = tw(FlexCol)`hidden md:(flex pt-4) lg:(pt-5) xl:(pt-0)`;\nconst CompactSkillOrderSmallWhiteText = tw(SmallWhiteText)`uppercase`;\nconst CompactSkillOrderRow = tw(FlexRow)`pt-3`;\n\nconst CompactSkillOrder = () => {\n\n    const { dataApiBuildData: { data: { lol: { champion: { build: { skillOrder = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] } = {} } = {} } = {} } = {} } = {}, squidexApiBuildData: { data: { championCommonInfo: [{ flatData: { abilities: abilitiesRaw = [] } = {} } = {}] = [] } = {} } = {}, loading: isLoading = true } = useContext(BuildContext);\n\n    const abilities = abilitiesRaw.filter(a => a.flatData.activationKey !== 'PASSIVE') || [];\n    const skillMap = abilities.length > 0 ? abilities.reduce((a, i) => {\n        a.push(i.flatData.activationKey);\n        return a;\n    }, []) : [];\n\n    const loading = isLoading || (skillMap.length === 0);\n\n    return (\n        <CompactSkillOrderStyles>\n            <CompactSkillOrderSmallWhiteText>Skill order</CompactSkillOrderSmallWhiteText>\n            <CompactSkillOrderRow>\n                <CompactSkillOrderDisplay skillMap={skillMap} skillOrder={skillOrder} loading={loading} />\n            </CompactSkillOrderRow>\n            {/** Add column version for desktop? */}\n        </CompactSkillOrderStyles>\n    );\n};\n\nexport default CompactSkillOrder;","import CompactSkillPriority from '../compact-skill-priority';\nimport CompactSkillOrder from '../compact-skill-order';\n\nconst CompactSkills = () => {\n\n    return (\n        <>\n            <CompactSkillPriority />\n            <CompactSkillOrder />\n        </>\n    );\n};\n\nexport default CompactSkills;","import tw from 'twin.macro';\nimport ContentSquareStyles from '../../styles/components/content-square';\n\nconst ContentSquareLetterSpan = tw.span`flex justify-center items-center h-full`;\n\nconst ContentSquare = ({ letter = false, wh = 16, children, loading = true, noBg = false, ...rest }) => {\n\n    return (\n        <ContentSquareStyles letter={letter} wh={wh} loading={loading} noBg={noBg} {...rest}>\n            <ContentSquareLetterSpan>{children}</ContentSquareLetterSpan>\n        </ContentSquareStyles>\n    );\n};\n\nexport default ContentSquare;","import DynamicSvg from '../dynamic-svg';\n\nconst RightArrow = ({ className }) => {\n\n    return (\n        <DynamicSvg name=\"right-arrow\" className={className} />\n    );\n}\n\nexport default RightArrow;","import tw, { styled } from 'twin.macro';\nimport LoadingText from '../../utils/loading-text';\n\nconst ContentSquareStyles = styled.div(({ wh = 16, letter = false, loading = true, noBg = false }) => [\n    tw`text-white font-bold text-xs bg-widget-purple-overlay rounded-sm`,\n    'W' === letter ? tw`text-widget-keys-W!` : tw``,\n    'Q' === letter ? tw`text-widget-keys-Q!` : tw``,\n    'E' === letter ? tw`text-widget-keys-E!` : tw``,\n    'R' === letter ? tw`text-widget-keys-R!` : tw``,\n    true === noBg ? tw`bg-transparent` : tw``,\n    loading && (LoadingText),\n    { width: `${wh}px`, height: `${wh}px` }\n]);\n\nexport default ContentSquareStyles;"],"sourceRoot":""}