{"version":3,"sources":["webpack://mobalytics-builds-widget/./src/widget/app/components/overlay/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/compact-skill-priority/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/compact-skill-order-display/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/compact-skill-order/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/compact-skills/index.js"],"names":["memo","letter","wh","children","loading","LetterOverlayStyles","useStyled","styled","ContentSquareStyles","parseStyles","CompactSkillPriorityStyles","FlexCol","CompactSkillPrioritySmallWhiteText","SmallWhiteText","CompactSkillPriorityRow","FlexRow","RightArrowStyles","RightArrow","sqData","data","championCommonInfo","flatData","abilities","abilitiesRaw","useSquidexApi","isLoading","useLoading","useMemo","filter","a","activationKey","length","slug","type","map","i","overlay","by","identifier","cursor","skillMap","skillOrder","SkillOrderDisplayStyles","leftSpace","SkillOrderNumberCol","SkillOrderKeyCol","SkillOrderDisplayNumberSmallPurpleText","SmallPurpleText","s","number","key","CompactSkillOrderStyles","CompactSkillOrderSmallWhiteText","CompactSkillOrderRow","daData","lol","champion","build","useDataApi","reduce","push"],"mappings":"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","file":"489.bundle.js","sourcesContent":["import { memo } from 'preact/compat';\nimport tw from 'twin.macro';\nimport { useStyled } from '../../lib/context/goober';\nimport { parseStyles } from '../../lib/helpers';\nimport ContentSquareStyles from '../../styles/components/content-square';\n\nconst LetterOverlay = ({ letter = false, wh = 16, children, loading = true }) => {\n\n    const styled = useStyled();\n\n    const LetterOverlayStyles = styled(ContentSquareStyles)(() => {\n        return parseStyles([\n            tw`flex! justify-center! absolute! bottom-0! right-0!`,\n        ]);\n    });\n\n    return (\n        <LetterOverlayStyles wh={wh} letter={letter} loading={loading}>\n            {children}\n        </LetterOverlayStyles>\n    );\n};\n\nexport default memo(LetterOverlay);","import { memo } from 'preact/compat';\nimport { useMemo } from 'preact/hooks';\nimport { useSquidexApi } from '../../lib/context/squidex-api';\nimport { useLoading } from '../../lib/context/loading';\nimport SpellItem from '../spell-item';\nimport LetterOverlay from '../overlay';\nimport RightArrow from '../right-arrow';\nimport ChampionSkillTooltipWrapper from '../tooltips/champion-skill-tooltip-wrapper';\nimport tw from 'twin.macro';\nimport { useStyled } from '../../lib/context/goober';\nimport FlexRow from '../../styles/components/flex-row';\nimport FlexCol from '../../styles/components/flex-col';\nimport SmallWhiteText from '../../styles/components/small-white-text';\nimport { parseStyles } from '../../lib/helpers';\n\nconst CompactSkillPriority = () => {\n\n    const styled = useStyled();\n\n    const CompactSkillPriorityStyles = styled(FlexCol)(() => {\n        return parseStyles([\n            tw`mr-0 xl:(mr-10)`,\n        ]);\n    });\n    const CompactSkillPrioritySmallWhiteText = styled(SmallWhiteText)(() => {\n        return parseStyles([\n            tw`uppercase`,\n        ]);\n    });\n    const CompactSkillPriorityRow = styled(FlexRow)(() => {\n        return parseStyles([\n            tw`pt-2.5`,\n        ]);\n    });\n    const RightArrowStyles = styled(RightArrow)(() => {\n        return parseStyles([\n            tw`mx-2`,\n        ]);\n    });\n\n    const { sqData: { data: { championCommonInfo: [{ flatData: { abilities: abilitiesRaw = [] } = {} } = {}] = [] } = {} } = {} } = useSquidexApi();\n    const { loading: isLoading = true } = useLoading();\n\n    const abilities = useMemo(() => {\n        return abilitiesRaw.filter(a => a.flatData.activationKey !== 'PASSIVE') || [];\n    }, [abilitiesRaw]);\n\n    const loading = isLoading || abilities.length === 0;\n\n    return (\n        <CompactSkillPriorityStyles>\n            <CompactSkillPrioritySmallWhiteText>Skill priority</CompactSkillPrioritySmallWhiteText>\n            <CompactSkillPriorityRow>\n                {loading && (\n                    <>\n                        <SpellItem slug={false} wh={32} type=\"skill\" />\n                        <RightArrowStyles />\n                        <SpellItem slug={false} wh={32} type=\"skill\" />\n                        <RightArrowStyles />\n                        <SpellItem slug={false} wh={32} type=\"skill\" />\n                        <RightArrowStyles />\n                        <SpellItem slug={false} wh={32} type=\"skill\" />\n                    </>\n                )}\n                {!loading && abilities.map((a, i) => {\n\n                    const { flatData } = a;\n                    const { activationKey = false, slug = false } = flatData;\n\n                    const overlay = activationKey ? (\n                        <LetterOverlay key={activationKey} letter={activationKey} loading={false}>\n                            {activationKey}\n                        </LetterOverlay>\n                    ) : false;\n\n                    return (\n                        <>\n                            <ChampionSkillTooltipWrapper by=\"slug\" identifier={slug}>\n                                <SpellItem cursor=\"help\" key={activationKey} overlay={overlay} slug={slug} wh={32} type=\"skill\" />\n                            </ChampionSkillTooltipWrapper>\n                            {i !== abilities.length - 1 && (\n                                <RightArrowStyles />\n                            )}\n                        </>\n                    );\n                })}\n            </CompactSkillPriorityRow>\n        </CompactSkillPriorityStyles>\n    );\n};\n\nexport default memo(CompactSkillPriority);","import ContentSquare from '../content-square';\nimport tw from 'twin.macro';\nimport { useStyled } from '../../lib/context/goober';\nimport FlexRow from '../../styles/components/flex-row';\nimport FlexCol from '../../styles/components/flex-col';\nimport SmallPurpleText from '../../styles/components/small-purple-text';\nimport { parseStyles } from '../../lib/helpers';\n\nconst SkillOrderDisplay = ({ skillMap, skillOrder, loading = true }) => {\n\n    const styled = useStyled();\n\n    const SkillOrderDisplayStyles = styled(FlexCol)(({ leftSpace }) => {\n        return parseStyles([\n            tw`items-center`,\n            'large' === leftSpace ? tw`md:(ml-2)` : tw``,\n            'normal' === leftSpace ? tw`md:(ml-1.5)` : tw``,\n            'small' === leftSpace ? tw`md:(ml-1)` : tw``,\n            'very-small' === leftSpace ? tw`md:(ml-0.5)` : tw``,\n        ]);\n    });\n    const SkillOrderNumberCol = styled(FlexRow)(() => {\n        return parseStyles([\n            tw`mb-1`,\n        ]);\n    });\n    const SkillOrderKeyCol = styled(FlexRow)(() => {\n        return parseStyles([\n            tw``,\n        ]);\n    });\n    const SkillOrderDisplayNumberSmallPurpleText = styled(SmallPurpleText)(() => {\n        return parseStyles([\n            tw`capitalize text-xxs leading-none`,\n        ]);\n    });\n\n    return (\n        <>\n            {skillOrder.map((s, i) => {\n                const number = i + 1;\n                const key = skillMap[s - 1];\n                const leftSpace = i !== 0 ? 'small' : false;\n                return (\n                    <SkillOrderDisplayStyles key={number} leftSpace={leftSpace}>\n                        <SkillOrderNumberCol>\n                            <SkillOrderDisplayNumberSmallPurpleText>{number}</SkillOrderDisplayNumberSmallPurpleText>\n                        </SkillOrderNumberCol>\n                        <SkillOrderKeyCol>\n                            <ContentSquare letter={key} wh={20} loading={loading}>\n                                {key}\n                            </ContentSquare>\n                        </SkillOrderKeyCol>\n                    </SkillOrderDisplayStyles>\n                );\n            })}\n        </>\n    );\n};\n\nexport default SkillOrderDisplay;","import { memo } from 'preact/compat';\nimport { useMemo } from 'preact/hooks';\nimport { useDataApi } from '../../lib/context/data-api';\nimport { useSquidexApi } from '../../lib/context/squidex-api';\nimport { useLoading } from '../../lib/context/loading';\nimport tw from 'twin.macro';\nimport { useStyled } from '../../lib/context/goober';\nimport FlexRow from '../../styles/components/flex-row';\nimport FlexCol from '../../styles/components/flex-col';\nimport SmallWhiteText from '../../styles/components/small-white-text';\nimport CompactSkillOrderDisplay from '../compact-skill-order-display';\nimport { parseStyles } from '../../lib/helpers';\n\nconst CompactSkillOrder = () => {\n\n    const styled = useStyled();\n\n    const CompactSkillOrderStyles = styled(FlexCol)(() => {\n        return parseStyles([\n            tw`hidden md:(flex pt-4) lg:(pt-5) xl:(pt-0)`,\n        ]);\n    });\n    const CompactSkillOrderSmallWhiteText = styled(SmallWhiteText)(() => {\n        return parseStyles([\n            tw`uppercase`,\n        ]);\n    });\n    const CompactSkillOrderRow = styled(FlexRow)(() => {\n        return parseStyles([\n            tw`pt-3`,\n        ]);\n    });\n\n    const { daData: { data: { lol: { champion: { build: { skillOrder = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] } = {} } = {} } = {} } = {} } = {} } = useDataApi();\n    const { sqData: { data: { championCommonInfo: [{ flatData: { abilities: abilitiesRaw = [] } = {} } = {}] = [] } = {} } = {} } = useSquidexApi();\n    const { loading: isLoading = true } = useLoading();\n\n    const abilities = useMemo(() => {\n        return abilitiesRaw.filter(a => a.flatData.activationKey !== 'PASSIVE') || [];\n    }, [abilitiesRaw]);\n\n    const skillMap = useMemo(() => {\n        return abilities.length > 0 ? abilities.reduce((a, i) => {\n            a.push(i.flatData.activationKey);\n            return a;\n        }, []) : []\n    }, [abilities]);\n\n    const loading = isLoading || (skillMap.length === 0);\n\n    return (\n        <CompactSkillOrderStyles>\n            <CompactSkillOrderSmallWhiteText>Skill order</CompactSkillOrderSmallWhiteText>\n            <CompactSkillOrderRow>\n                <CompactSkillOrderDisplay skillMap={skillMap} skillOrder={skillOrder} loading={loading} />\n            </CompactSkillOrderRow>\n            {/** Add column version for desktop? */}\n        </CompactSkillOrderStyles>\n    );\n};\n\nexport default memo(CompactSkillOrder);","import CompactSkillPriority from '../compact-skill-priority';\nimport CompactSkillOrder from '../compact-skill-order';\n\nconst CompactSkills = () => {\n\n    return (\n        <>\n            <CompactSkillPriority />\n            <CompactSkillOrder />\n        </>\n    );\n};\n\nexport default CompactSkills;"],"sourceRoot":""}