{"version":3,"sources":["webpack://mobalytics-builds-widget/./src/widget/app/components/overlay/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/compact-skill-priority/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/compact-skill-order-display/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/compact-skill-order/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/compact-skills/index.js"],"names":["LetterOverlayStyles","tw","ContentSquareStyles","memo","letter","wh","children","loading","CompactSkillPriorityStyles","FlexCol","CompactSkillPrioritySmallWhiteText","SmallWhiteText","CompactSkillPriorityRow","FlexRow","RightArrowStyles","RightArrow","sqData","data","championCommonInfo","flatData","abilities","abilitiesRaw","useSquidexApi","isLoading","useLoading","useMemo","filter","a","activationKey","length","slug","type","map","i","overlay","by","identifier","cursor","SkillOrderDisplayStyles","styled","leftSpace","SkillOrderNumberCol","SkillOrderKeyCol","SkillOrderDisplayNumberSmallPurpleText","SmallPurpleText","skillMap","skillOrder","s","number","key","CompactSkillOrderStyles","CompactSkillOrderSmallWhiteText","CompactSkillOrderRow","daData","lol","champion","build","useDataApi","reduce","push"],"mappings":"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","file":"489.bundle.js","sourcesContent":["import { memo } from 'preact/compat';\nimport tw from 'twin.macro';\nimport ContentSquareStyles from '../../styles/components/content-square';\n\nconst LetterOverlayStyles = tw(ContentSquareStyles)`flex! justify-center! absolute! bottom-0! right-0!`;\n\nconst LetterOverlay = ({ letter = false, wh = 16, children, loading = true }) => {\n\n    return (\n        <LetterOverlayStyles wh={wh} letter={letter} loading={loading}>\n            {children}\n        </LetterOverlayStyles>\n    );\n};\n\nexport default memo(LetterOverlay);","import { memo } from 'preact/compat';\nimport { useMemo } from 'preact/hooks';\nimport { useSquidexApi } from '../../lib/context/squidex-api';\nimport { useLoading } from '../../lib/context/loading';\nimport SpellItem from '../spell-item';\nimport LetterOverlay from '../overlay';\nimport RightArrow from '../right-arrow';\nimport ChampionSkillTooltipWrapper from '../tooltips/champion-skill-tooltip-wrapper';\nimport tw from 'twin.macro';\nimport FlexRow from '../../styles/components/flex-row';\nimport FlexCol from '../../styles/components/flex-col';\nimport SmallWhiteText from '../../styles/components/small-white-text';\n\nconst CompactSkillPriorityStyles = tw(FlexCol)`mr-0 xl:(mr-10)`;\nconst CompactSkillPrioritySmallWhiteText = tw(SmallWhiteText)`uppercase`;\nconst CompactSkillPriorityRow = tw(FlexRow)`pt-2.5`;\nconst RightArrowStyles = tw(RightArrow)`mx-2`;\n\nconst CompactSkillPriority = () => {\n\n    const { sqData: { data: { championCommonInfo: [{ flatData: { abilities: abilitiesRaw = [] } = {} } = {}] = [] } = {} } = {} } = useSquidexApi();\n    const { loading: isLoading = true } = useLoading();\n\n    const abilities = useMemo(() => {\n        return abilitiesRaw.filter(a => a.flatData.activationKey !== 'PASSIVE') || [];\n    }, [abilitiesRaw]);\n\n    const loading = isLoading || abilities.length === 0;\n\n    return (\n        <CompactSkillPriorityStyles>\n            <CompactSkillPrioritySmallWhiteText>Skill priority</CompactSkillPrioritySmallWhiteText>\n            <CompactSkillPriorityRow>\n                {loading && (\n                    <>\n                        <SpellItem slug={false} wh={32} type=\"skill\" />\n                        <RightArrowStyles />\n                        <SpellItem slug={false} wh={32} type=\"skill\" />\n                        <RightArrowStyles />\n                        <SpellItem slug={false} wh={32} type=\"skill\" />\n                        <RightArrowStyles />\n                        <SpellItem slug={false} wh={32} type=\"skill\" />\n                    </>\n                )}\n                {!loading && abilities.map((a, i) => {\n\n                    const { flatData } = a;\n                    const { activationKey = false, slug = false } = flatData;\n\n                    const overlay = activationKey ? (\n                        <LetterOverlay key={activationKey} letter={activationKey} loading={false}>\n                            {activationKey}\n                        </LetterOverlay>\n                    ) : false;\n\n                    return (\n                        <>\n                            <ChampionSkillTooltipWrapper by=\"slug\" identifier={slug}>\n                                <SpellItem cursor=\"help\" key={activationKey} overlay={overlay} slug={slug} wh={32} type=\"skill\" />\n                            </ChampionSkillTooltipWrapper>\n                            {i !== abilities.length - 1 && (\n                                <RightArrowStyles />\n                            )}\n                        </>\n                    );\n                })}\n            </CompactSkillPriorityRow>\n        </CompactSkillPriorityStyles>\n    );\n};\n\nexport default memo(CompactSkillPriority);","import ContentSquare from '../content-square';\nimport tw, { styled } from 'twin.macro';\nimport FlexRow from '../../styles/components/flex-row';\nimport FlexCol from '../../styles/components/flex-col';\nimport SmallPurpleText from '../../styles/components/small-purple-text';\n\nconst SkillOrderDisplayStyles = styled(FlexCol)(({ leftSpace }) => [\n    tw`items-center`,\n    'large' === leftSpace ? tw`md:(ml-2)` : tw``,\n    'normal' === leftSpace ? tw`md:(ml-1.5)` : tw``,\n    'small' === leftSpace ? tw`md:(ml-1)` : tw``,\n    'very-small' === leftSpace ? tw`md:(ml-0.5)` : tw``,\n]);\nconst SkillOrderNumberCol = tw(FlexRow)`mb-1`;\nconst SkillOrderKeyCol = tw(FlexRow)``;\nconst SkillOrderDisplayNumberSmallPurpleText = tw(SmallPurpleText)`capitalize text-xxs leading-none`;\n\nconst SkillOrderDisplay = ({ skillMap, skillOrder, loading = true }) => {\n\n    return (\n        <>\n            {skillOrder.map((s, i) => {\n                const number = i + 1;\n                const key = skillMap[s - 1];\n                const leftSpace = i !== 0 ? 'small' : false;\n                return (\n                    <SkillOrderDisplayStyles key={number} leftSpace={leftSpace}>\n                        <SkillOrderNumberCol>\n                            <SkillOrderDisplayNumberSmallPurpleText>{number}</SkillOrderDisplayNumberSmallPurpleText>\n                        </SkillOrderNumberCol>\n                        <SkillOrderKeyCol>\n                            <ContentSquare letter={key} wh={20} loading={loading}>\n                                {key}\n                            </ContentSquare>\n                        </SkillOrderKeyCol>\n                    </SkillOrderDisplayStyles>\n                );\n            })}\n        </>\n    );\n};\n\nexport default SkillOrderDisplay;","import { memo } from 'preact/compat';\nimport { useMemo } from 'preact/hooks';\nimport { useDataApi } from '../../lib/context/data-api';\nimport { useSquidexApi } from '../../lib/context/squidex-api';\nimport { useLoading } from '../../lib/context/loading';\nimport tw from 'twin.macro';\nimport FlexRow from '../../styles/components/flex-row';\nimport FlexCol from '../../styles/components/flex-col';\nimport SmallWhiteText from '../../styles/components/small-white-text';\nimport CompactSkillOrderDisplay from '../compact-skill-order-display';\n\nconst CompactSkillOrderStyles = tw(FlexCol)`hidden md:(flex pt-4) lg:(pt-5) xl:(pt-0)`;\nconst CompactSkillOrderSmallWhiteText = tw(SmallWhiteText)`uppercase`;\nconst CompactSkillOrderRow = tw(FlexRow)`pt-3`;\n\nconst CompactSkillOrder = () => {\n\n    const { daData: { data: { lol: { champion: { build: { skillOrder = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] } = {} } = {} } = {} } = {} } = {} } = useDataApi();\n    const { sqData: { data: { championCommonInfo: [{ flatData: { abilities: abilitiesRaw = [] } = {} } = {}] = [] } = {} } = {} } = useSquidexApi();\n    const { loading: isLoading = true } = useLoading();\n\n    const abilities = useMemo(() => {\n        return abilitiesRaw.filter(a => a.flatData.activationKey !== 'PASSIVE') || [];\n    }, [abilitiesRaw]);\n\n    const skillMap = useMemo(() => {\n        return abilities.length > 0 ? abilities.reduce((a, i) => {\n            a.push(i.flatData.activationKey);\n            return a;\n        }, []) : []\n    }, [abilities]);\n\n    const loading = isLoading || (skillMap.length === 0);\n\n    return (\n        <CompactSkillOrderStyles>\n            <CompactSkillOrderSmallWhiteText>Skill order</CompactSkillOrderSmallWhiteText>\n            <CompactSkillOrderRow>\n                <CompactSkillOrderDisplay skillMap={skillMap} skillOrder={skillOrder} loading={loading} />\n            </CompactSkillOrderRow>\n            {/** Add column version for desktop? */}\n        </CompactSkillOrderStyles>\n    );\n};\n\nexport default memo(CompactSkillOrder);","import CompactSkillPriority from '../compact-skill-priority';\nimport CompactSkillOrder from '../compact-skill-order';\n\nconst CompactSkills = () => {\n\n    return (\n        <>\n            <CompactSkillPriority />\n            <CompactSkillOrder />\n        </>\n    );\n};\n\nexport default CompactSkills;"],"sourceRoot":""}