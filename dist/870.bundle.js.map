{"version":3,"sources":["webpack://mobalytics-builds-widget/./src/widget/app/components/full-skill-order-mapped-skills/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/full-skills-skills-map/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/full-skill-order-abilities/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/full-skill-order-display/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/full-skills/index.js"],"names":["FullSkillOrderMappedSkillsStyles","tw","FlexRow","FullSkillOrderDisplayStyles","styled","FlexCol","leftSpace","keyHeight","FullSkillOrderNumberCol","FullSkillOrderKeyCol","FullSkillOrderDisplayNumberSmallPurpleText","SmallPurpleText","skillOrder","skillMap","loading","map","s","i","number","key","letter","wh","FullSkillOrderSkillsMapStyles","FullSkillOrderContentSquareStyles","ContentSquare","rightSpace","rawSkillMap","length","filter","rightArrowOutput","noBg","FullSkillOrderAbilitiesStyles","abilities","slug","topSpace","bottomSpace","type","a","flatData","activationKey","by","identifier","cursor","FullSkillOrderStyles","FullSkillOrderSmallWhiteText","SmallWhiteText","FullSkillOrderRow","pt","memo","daData","data","lol","champion","build","useDataApi","sqData","championCommonInfo","abilitiesRaw","useSquidexApi","isLoading","useLoading","useMemo","reduce","push"],"mappings":"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","file":"870.bundle.js","sourcesContent":["import ContentSquare from '../content-square';\nimport tw, { styled } from 'twin.macro';\nimport FlexRow from '../../styles/components/flex-row';\nimport FlexCol from '../../styles/components/flex-col';\nimport SmallPurpleText from '../../styles/components/small-purple-text';\n\nconst FullSkillOrderMappedSkillsStyles = tw(FlexRow)``;\nconst FullSkillOrderDisplayStyles = styled(FlexCol)(({ leftSpace, keyHeight = 0 }) => [\n    tw`items-center ml-2.5 relative before:(absolute z-0 inset-1/3 left-49p content block w-0.25 h-full bg-widget-purple-text bg-opacity-5)`,\n    0 === keyHeight ? tw`items-center ml-2.5 relative before:(absolute z-0 inset-36p left-49p content block w-0.25 h-22-24p bg-widget-purple-text-25 bg-opacity-5)` : tw``,\n    1 === keyHeight ? tw`items-center ml-2.5 relative before:(absolute z-0 inset-36p left-49p content block w-0.25 h-111-15p bg-widget-purple-text-25 bg-opacity-5)` : tw``,\n    2 === keyHeight ? tw`items-center ml-2.5 relative before:(absolute z-0 inset-36p left-49p content block w-0.25 h-200p bg-widget-purple-text-25 bg-opacity-5)` : tw``,\n    3 === keyHeight ? tw`items-center ml-2.5 relative before:(absolute z-0 inset-36p left-49p content block w-0.25 h-289p bg-widget-purple-text-25 bg-opacity-5)` : tw``,\n    'large' === leftSpace ? tw`md:(ml-3)` : tw``,\n    'normal' === leftSpace ? tw`md:(ml-2.5)` : tw``,\n    'small' === leftSpace ? tw`md:(ml-2)` : tw``,\n    'very-small' === leftSpace ? tw`md:(ml-0-76)` : tw``,\n]);\nconst FullSkillOrderNumberCol = tw(FlexRow)`mb-1`;\nconst FullSkillOrderKeyCol = styled(FlexRow)(({ keyHeight = 0 }) => [\n    tw`relative`,\n    0 === keyHeight ? tw`top-1.6` : tw``,\n    1 === keyHeight ? tw`top-9.6` : tw``,\n    2 === keyHeight ? tw`top-17.6` : tw``,\n    3 === keyHeight ? tw`top-25.5` : tw``,\n]);\nconst FullSkillOrderDisplayNumberSmallPurpleText = tw(SmallPurpleText)`capitalize text-xs leading-none`;\n\nconst FullSkillOrderMappedSkills = ({ skillOrder, skillMap, loading = true }) => {\n\n    return (\n        <FullSkillOrderMappedSkillsStyles>\n            {skillOrder.map((s, i) => {\n                const number = i + 1;\n                const key = skillMap[s - 1];\n                const leftSpace = i !== 0 ? 'very-small' : 'small';\n\n                return (\n                    <FullSkillOrderDisplayStyles keyHeight={s - 1} key={number} leftSpace={leftSpace}>\n                        <FullSkillOrderNumberCol>\n                            <FullSkillOrderDisplayNumberSmallPurpleText>{number}</FullSkillOrderDisplayNumberSmallPurpleText>\n                        </FullSkillOrderNumberCol>\n                        <FullSkillOrderKeyCol keyHeight={s - 1}>\n                            <ContentSquare letter={key} wh={20} loading={loading}>\n                                {key}\n                            </ContentSquare>\n                        </FullSkillOrderKeyCol>\n                    </FullSkillOrderDisplayStyles>\n                );\n            })}\n        </FullSkillOrderMappedSkillsStyles>\n    );\n};\n\nexport default FullSkillOrderMappedSkills;","import ContentSquare from '../content-square';\nimport RightArrow from '../right-arrow';\nimport tw, { styled } from 'twin.macro';\nimport FlexRow from '../../styles/components/flex-row';\n\nconst FullSkillOrderSkillsMapStyles = tw(FlexRow)`ml-2`;\nconst FullSkillOrderContentSquareStyles = styled(ContentSquare)(({ leftSpace = false, rightSpace = false }) => [\n    'normal' === leftSpace ? tw`ml-2` : tw``,\n    'normal' === rightSpace ? tw`mr-2` : tw``\n]);\n\nconst FullSkillOrderSkillsMap = ({ skillMap: rawSkillMap = [], loading = true }) => {\n\n    const skillMap = rawSkillMap.length > 0 ? rawSkillMap.filter(s => s !== 'R') : [\n        0, 1, 2\n    ];\n\n    return (\n        <FullSkillOrderSkillsMapStyles>\n            {skillMap && skillMap.map((s, i) => {\n\n                const rightArrowOutput = i !== skillMap.length - 1 ? (\n                    <RightArrow />\n                ) : false;\n\n                const leftSpace = i !== 0 ? 'normal' : false;\n                const rightSpace = i !== skillMap.length - 1 ? 'normal' : false;\n\n                return (\n                    <>\n                        <FullSkillOrderContentSquareStyles leftSpace={leftSpace} rightSpace={rightSpace} letter={s} key={s} wh={16} loading={loading} noBg={true}>\n                            {s}\n                        </FullSkillOrderContentSquareStyles>\n                        {rightArrowOutput}\n                    </>\n                );\n            })}\n        </FullSkillOrderSkillsMapStyles>\n    );\n};\n\nexport default FullSkillOrderSkillsMap;","import SpellItem from '../spell-item';\nimport ChampionSkillTooltipWrapper from '../tooltips/champion-skill-tooltip-wrapper';\nimport tw from 'twin.macro';\nimport FlexCol from '../../styles/components/flex-col';\n\nconst FullSkillOrderAbilitiesStyles = tw(FlexCol)``;\n\nconst FullSkillOrderAbilities = ({ loading = true, abilities = [] }) => {\n    return (\n        <FullSkillOrderAbilitiesStyles>\n            {\n                loading && (\n                    <>\n                        <SpellItem slug={false} wh={24} topSpace=\"large\" bottomSpace=\"small\" type=\"skill\" />\n                        <SpellItem slug={false} wh={24} bottomSpace=\"small\" type=\"skill\" />\n                        <SpellItem slug={false} wh={24} bottomSpace=\"small\" type=\"skill\" />\n                        <SpellItem slug={false} wh={24} bottomSpace=\"small\" type=\"skill\" />\n                    </>\n                )\n            }\n            {\n                !loading && abilities.map((a, i) => {\n\n                    const { flatData } = a;\n                    const { activationKey = false, slug = false } = flatData;\n                    const topSpace = i === 0 ? 'large' : false;\n\n                    return (\n                        <>\n                            <ChampionSkillTooltipWrapper by=\"slug\" identifier={slug}>\n                                <SpellItem cursor=\"help\" key={activationKey} slug={slug} wh={24} topSpace={topSpace} bottomSpace=\"small\" type=\"skill\" />\n                            </ChampionSkillTooltipWrapper>\n                        </>\n                    );\n                })\n            }\n        </FullSkillOrderAbilitiesStyles>\n    );\n};\n\nexport default FullSkillOrderAbilities;","import FullSkillOrderAbilities from '../full-skill-order-abilities';\nimport FullSkillOrderMappedSkills from '../full-skill-order-mapped-skills';\nimport tw from 'twin.macro';\nimport FlexRow from '../../styles/components/flex-row';\n\nconst FullSkillOrderDisplayStyles = tw(FlexRow)`items-start`;\n\nconst FullSkillOrderDisplay = ({ abilities, skillOrder, skillMap, loading = true }) => {\n\n    return (\n        <FullSkillOrderDisplayStyles>\n            <FullSkillOrderAbilities abilities={abilities} loading={loading} />\n            <FullSkillOrderMappedSkills skillOrder={skillOrder} skillMap={skillMap} loading={loading} />\n        </FullSkillOrderDisplayStyles>\n    );\n};\n\nexport default FullSkillOrderDisplay;","import { memo } from 'preact/compat';\nimport { useMemo } from 'preact/hooks';\nimport { useDataApi } from '../../lib/context/data-api';\nimport { useSquidexApi } from '../../lib/context/squidex-api';\nimport { useLoading } from '../../lib/context/loading';\nimport FullSkillOrderSkillsMap from '../full-skills-skills-map';\nimport FullSkillOrderDisplay from '../full-skill-order-display';\nimport tw, { styled } from 'twin.macro';\nimport FlexRow from '../../styles/components/flex-row';\nimport FlexCol from '../../styles/components/flex-col';\nimport SmallWhiteText from '../../styles/components/small-white-text';\n\nconst FullSkillOrderStyles = tw(FlexCol)`hidden md:(flex pt-4) lg:(pt-5) xl:(pt-0)`;\nconst FullSkillOrderSmallWhiteText = tw(SmallWhiteText)`uppercase`;\nconst FullSkillOrderRow = styled(FlexRow)(({ pt = false }) => [\n    tw``,\n    'normal' === pt ? tw`pt-3` : tw``,\n]);\n\nconst FullSkills = () => {\n\n    const { daData: { data: { lol: { champion: { build: { skillOrder = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] } = {} } = {} } = {} } = {} } = {} } = useDataApi();\n    const { sqData: { data: { championCommonInfo: [{ flatData: { abilities: abilitiesRaw = [] } = {} } = {}] = [] } = {} } = {} } = useSquidexApi();\n    const { loading: isLoading = true } = useLoading();\n\n    const abilities = useMemo(() => {\n        return abilitiesRaw.filter(a => a.flatData.activationKey !== 'PASSIVE') || [];\n    }, [abilitiesRaw]);\n\n    const skillMap = useMemo(() => {\n        return abilities.length > 0 ? abilities.reduce((a, i) => {\n            a.push(i.flatData.activationKey);\n            return a;\n        }, []) : []\n    }, [abilities]);\n\n    const loading = isLoading || (skillMap.length === 0);\n\n    return (\n        <FullSkillOrderStyles>\n            <FullSkillOrderRow>\n                <FullSkillOrderSmallWhiteText>Skill order</FullSkillOrderSmallWhiteText>\n                <FullSkillOrderSkillsMap skillMap={skillMap} loading={loading} />\n            </FullSkillOrderRow>\n            <FullSkillOrderRow pt=\"normal\">\n                <FullSkillOrderDisplay abilities={abilities} skillOrder={skillOrder} skillMap={skillMap} loading={loading} />\n            </FullSkillOrderRow>\n        </FullSkillOrderStyles>\n    );\n};\n\nexport default memo(FullSkills);"],"sourceRoot":""}