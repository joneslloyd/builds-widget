{"version":3,"sources":["webpack://mobalytics-builds-widget/./src/widget/app/components/full-runes-body-row/index.js","webpack://mobalytics-builds-widget/./src/widget/app/styles/utils/full-runes-display/index.js","webpack://mobalytics-builds-widget/./src/widget/app/styles/components/full-runes-display/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/full-runes-rune-group/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/full-runes/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/rune/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/tooltips/perk-tooltip/index.js","webpack://mobalytics-builds-widget/./src/widget/app/components/tooltips/perk-tooltip-wrapper/index.js"],"names":["index","data","type","loading","styled","useStyled","FullRunesBodyRowStyles","topSpace","justifyContentSpaceBetween","parseStyles","FullRunesBodyRowRune","leftSpace","hasCircle","runes","runeSize","runeBorderWidth","map","runeData","runeIndex","rune","hasRune","key","by","identifier","cursor","greyed","id","wh","borderWidth","rounded","gold","memo","children","rest","FullRunesDisplayC","FullRunesDisplayU","LoadingText","mainId","iDs","isLoading","FullRunesRuneGroupStyles","FullRunesDisplay","FullRunesTitle","FullRunesRuneTitle","SmallWhiteText","FullRunesBody","thisRuneSlot","RunesSlotsMap","r","title","icon","label","theTitle","slots","theSlotsRaw","shardSlots","theSlots","slice","theRunes","s","i","rIndex","includes","outerLeftSpace","row","rowIndex","totalItems","length","FullRunesStyles","FlexCol","FullRunesSmallWhiteText","FullRunesDisplayRow","FlexRow","FullRunesDisplayStyles","daData","lol","champion","build","perks","useDataApi","useLoading","IDs","style","primaryId","subStyle","secondaryId","wrapComponents","RoundedGoldBorder","none","WrapComponentStyles","width","height","src","perkImage","bgColor","ttData","setTtData","useTooltips","localTooltip","setLocalTooltip","useState","setLocalTooltipRes","useCallback","ttRes","doSetLocalTooltipRes","doTooltip","async","maybeFetchTooltip","useAsync","name","iconName","iconUrl","description","longDescription","shortDescription","customDescription","tooltipFn"],"mappings":"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","file":"490.bundle.js","sourcesContent":["import Rune from '../rune';\nimport tw from 'twin.macro';\nimport { useStyled } from '../../lib/context/goober';\nimport PerkTooltipWrapper from '../tooltips/perk-tooltip-wrapper';\nimport { parseStyles } from '../../lib/helpers';\n\nconst FullRunesBodyRow = ({ index = 0, data = {}, type = 'primary', loading = true }) => {\n\n    const styled = useStyled();\n\n    const FullRunesBodyRowStyles = styled('div')(({ topSpace = false, justifyContentSpaceBetween = false }) => {\n        return parseStyles([\n            tw`flex flex-row w-full justify-center items-center`,\n            'normal' === topSpace ? tw`pt-2.5` : tw``,\n            'large' === topSpace ? tw`pt-5` : tw``,\n            'x-large' === topSpace ? tw`pt-8` : tw``,\n            true === justifyContentSpaceBetween ? tw`justify-center` : tw``\n        ]);\n    });\n    const FullRunesBodyRowRune = styled('div')(({ leftSpace = false }) => {\n        return parseStyles([\n            tw`px-0`,\n            'normal' === leftSpace ? tw`pl-2.5` : tw``,\n            'large' === leftSpace ? tw`pl-5` : tw``,\n            'x-large' === leftSpace ? tw`pl-8` : tw``,\n        ]);\n    });\n\n    const { hasCircle, runes } = data;\n    const runeSize = 'primary' === type ? (index === 0 ? 48 : 36) : (index > 2 ? 24 : 36);\n    const topSpace = index === 0 ? false : ('secondary' === type && index > 2 ? 'x-large' : 'large');\n    const justifyContentSpaceBetween = ('secondary' === type && index === 0) ? true : false;\n    const runeBorderWidth = ('secondary' === type && index > 2) ? '1px' : '2px';\n\n    return (\n        <FullRunesBodyRowStyles topSpace={topSpace} justifyContentSpaceBetween={justifyContentSpaceBetween}>\n            {runes && runes.map((runeData, runeIndex) => {\n\n                const { rune = false, hasRune = false } = runeData;\n                const leftSpace = runeIndex === 0 ? false : (('primary' === type && index === 0) ? 'normal' : ((index > 2) ? 'x-large' : 'large'));\n\n                const key = `${rune ? rune : 'rune'}-${runeIndex}`;\n\n                return (\n                    <FullRunesBodyRowRune leftSpace={leftSpace}>\n                        <PerkTooltipWrapper by=\"riotId\" identifier={rune}>\n                            <Rune loading={loading} cursor=\"help\" greyed={!hasRune} key={key} id={rune} wh={runeSize} borderWidth={runeBorderWidth} rounded={hasCircle} gold={hasRune && hasCircle} />\n                        </PerkTooltipWrapper>\n                    </FullRunesBodyRowRune>\n                );\n            })}\n        </FullRunesBodyRowStyles>\n    );\n};\n\nexport default FullRunesBodyRow;","import tw from 'twin.macro';\n\nconst FullRunesDisplay = tw`flex`;\n\nexport default FullRunesDisplay;","import { memo } from 'preact/compat';\nimport { useStyled } from '../../../lib/context/goober';\nimport tw from 'twin.macro';\nimport { parseStyles } from '../../../lib/helpers';\nimport FullRunesDisplayU from '../../utils/full-runes-display';\nimport LoadingText from '../../utils/loading-text';\n\nconst FullRunesDisplay = ({ children, ...rest }) => {\n\n    const styled = useStyled();\n\n    const FullRunesDisplayC = styled('div')(({ loading }) => {\n        return parseStyles([\n            FullRunesDisplayU,\n            loading ? LoadingText : tw``,\n        ]);\n    });\n\n    return (\n        <FullRunesDisplayC {...rest}>{children}</FullRunesDisplayC>\n    );\n};\n\nexport default memo(FullRunesDisplay);","import { memo } from 'preact/compat';\nimport Rune from '../rune';\nimport FullRunesBodyRow from '../full-runes-body-row';\nimport { parseStyles, RunesSlotsMap } from '../../lib/helpers';\nimport tw from 'twin.macro';\nimport { useStyled } from '../../lib/context/goober';\nimport SmallWhiteText from '../../styles/components/small-white-text';\nimport FullRunesDisplay from '../../styles/components/full-runes-display';\nimport PerkTooltipWrapper from '../tooltips/perk-tooltip-wrapper';\n\nconst FullRunesRuneGroup = ({ mainId, iDs = [], type = 'primary', loading: isLoading = true }) => {\n\n    const styled = useStyled();\n\n    const FullRunesRuneGroupStyles = styled(FullRunesDisplay)(({ leftSpace = false }) => {\n        return parseStyles([\n            tw`flex-col`,\n            'normal' === leftSpace ? tw`mt-10 lg:(mt-0 ml-16)` : tw``,\n        ]);\n    });\n    const FullRunesTitle = styled('div')(() => {\n        return parseStyles([\n            tw`flex flex-row items-center justify-center`,\n        ]);\n    });\n    const FullRunesRuneTitle = styled(SmallWhiteText)(() => {\n        return parseStyles([\n            tw`text-widget-purple-full-runes-text capitalize text-sm font-bold ml-2`,\n        ]);\n    });\n    const FullRunesBody = styled('div')(() => {\n        return parseStyles([\n            tw`flex flex-col items-center pt-5`,\n        ]);\n    });\n\n    //Rune data\n    const thisRuneSlot = RunesSlotsMap.filter(r => {\n        const { title: { icon = 0 } = {} } = r;\n        return icon === mainId;\n    })[0];\n\n    //Rune title\n    const { title: { label: theTitle = 'xxxxxxx' } = {}, slots: theSlotsRaw = [] } = thisRuneSlot || {};\n\n    const shardSlots = RunesSlotsMap.filter(r => {\n        const { title: { label } = {} } = r;\n        return label === 'Shards';\n    })[0].slots;\n\n    const theSlots = 'secondary' === type ? [\n        ...theSlotsRaw.slice(1),\n        ...shardSlots\n    ] : theSlotsRaw;\n\n    //Rune slots\n    const theRunes = theSlots ? theSlots.map((s, i) => {\n        const hasCircle = ('secondary' === type || i !== 0) ? 'full' : false;\n        const runes = s.map((r, rIndex) => {\n            const hasRune = 'secondary' === type ? (i > 2 ? (r === iDs[i + 3]) : iDs.includes(r)) : iDs.includes(r);\n            return {\n                rune: r,\n                hasRune\n            };\n        });\n        return {\n            hasCircle,\n            runes\n        }\n    }) : [\n        {\n            runes: [\n                { rune: false },\n                { rune: false },\n                { rune: false },\n                { rune: false },\n            ],\n            hasCircle: 'primary' === type ? false : 'full'\n        },\n        {\n            runes: [\n                { rune: false },\n                { rune: false },\n                { rune: false },\n                { rune: false },\n            ],\n            hasCircle: 'full'\n        },\n        {\n            runes: [\n                { rune: false },\n                { rune: false },\n                { rune: false },\n                { rune: false },\n            ],\n            hasCircle: 'full'\n        },\n        {\n            runes: [\n                { rune: false },\n                { rune: false },\n                { rune: false },\n                { rune: false },\n            ],\n            hasCircle: 'full'\n        },\n    ];\n\n    const outerLeftSpace = 'secondary' === type ? 'normal' : false;\n    const loading = isLoading || (theTitle === 'xxxxxxx');\n\n    return (\n        <FullRunesRuneGroupStyles leftSpace={outerLeftSpace}>\n            <FullRunesTitle>\n                <PerkTooltipWrapper by=\"riotId\" identifier={mainId}>\n                    <Rune cursor=\"help\" id={mainId} wh={36} rounded={false} />\n                </PerkTooltipWrapper>\n                <FullRunesRuneTitle loading={loading}>{theTitle}</FullRunesRuneTitle>\n            </FullRunesTitle>\n            <FullRunesBody>\n                {theRunes && theRunes.map((row, rowIndex) => {\n                    const totalItems = theRunes.length;\n                    const key = `${rowIndex}-${totalItems}`;\n                    return (\n                        <FullRunesBodyRow key={key} index={rowIndex} totalItems={totalItems} data={row} type={type} loading={loading} />\n                    );\n                })}\n            </FullRunesBody>\n        </FullRunesRuneGroupStyles>\n\n    );\n};\n\nexport default memo(FullRunesRuneGroup);","import { memo } from 'preact/compat';\nimport { useDataApi } from '../../lib/context/data-api';\nimport { useLoading } from '../../lib/context/loading';\nimport FullRunesRuneGroup from '../full-runes-rune-group';\nimport tw from 'twin.macro';\nimport { useStyled } from '../../lib/context/goober';\nimport FlexRow from '../../styles/components/flex-row';\nimport FlexCol from '../../styles/components/flex-col';\nimport SmallWhiteText from '../../styles/components/small-white-text';\nimport FullRunesDisplay from '../../styles/components/full-runes-display';\nimport { parseStyles } from '../../lib/helpers';\n\nconst FullRunes = () => {\n\n    const styled = useStyled();\n\n    const FullRunesStyles = styled(FlexCol)(() => {\n        return parseStyles([\n            tw`mr-0 w-full xl:(mr-10 w-9/12)`,\n        ]);\n    });\n    const FullRunesSmallWhiteText = styled(SmallWhiteText)(() => {\n        return parseStyles([\n            tw`uppercase`,\n        ]);\n    });\n    const FullRunesDisplayRow = styled(FlexRow)(() => {\n        return parseStyles([\n            tw`w-full`,\n        ]);\n    });\n    const FullRunesDisplayStyles = styled(FullRunesDisplay)(() => {\n        return parseStyles([\n            tw`flex uppercase pt-2.5 flex-col w-full items-center lg:(flex-row items-start)`,\n        ]);\n    });\n\n    const { daData: { data: { lol: { champion: { build: { perks = {} } = {} } = {} } = {} } = {} } = {} } = useDataApi();\n    const { loading = true } = useLoading();\n    const { IDs: iDs = [], style: primaryId = false, subStyle: secondaryId = false } = perks;\n\n    return (\n        <FullRunesStyles>\n            <FullRunesSmallWhiteText>Runes</FullRunesSmallWhiteText>\n            <FullRunesDisplayRow>\n                <FullRunesDisplayStyles>\n                    <FullRunesRuneGroup mainId={primaryId} iDs={iDs} type=\"primary\" loading={loading} />\n                    <FullRunesRuneGroup mainId={secondaryId} iDs={iDs} type=\"secondary\" loading={loading} />\n                </FullRunesDisplayStyles>\n            </FullRunesDisplayRow>\n        </FullRunesStyles>\n    );\n};\n\nexport default memo(FullRunes);","import RoundedGoldBorder from '../rounded-gold-border';\nimport Image from '../image';\nimport { parseStyles, perkImage } from '../../lib/helpers';\nimport tw from 'twin.macro';\nimport { useStyled } from '../../lib/context/goober';\n\nconst Rune = ({ id = false, wh = 32, rounded = false, gold = false, leftSpace = false, borderWidth = false, greyed = false, cursor = 'default', loading = true }) => {\n\n    const styled = useStyled();\n\n    const RoundedGoldBorderStyles = styled(RoundedGoldBorder)(() => {\n        return parseStyles([\n            tw``,\n        ]);\n    });\n    const NoWrapStyles = styled('div')(() => {\n        return parseStyles([\n            tw``,\n        ]);\n    });\n\n    const wrapComponents = {\n        gold: RoundedGoldBorderStyles,\n        none: NoWrapStyles\n    };\n    const WrapComponent = gold ? wrapComponents.gold : wrapComponents.none;\n    const WrapComponentStyles = styled(WrapComponent)(({ leftSpace }) => {\n        return parseStyles([\n            tw`z-10`,\n            'large' === leftSpace ? tw`ml-4!` : tw``,\n            'normal' === leftSpace ? tw`ml-3!` : tw``,\n            'small' === leftSpace ? tw`ml-2!` : tw``,\n            'smaller' === leftSpace ? tw`ml-1!` : tw``,\n            'smallest' === leftSpace ? tw`ml-0.5!` : tw``,\n            { width: `${wh}px`, height: `${wh}px` },\n            true === greyed ? {\n                'opacity': '0.5',\n                'mix-blend-mode': 'luminosity'\n            } : tw``,\n        ]);\n    });\n\n    const src = perkImage(id);\n\n    return (\n        <WrapComponentStyles leftSpace={leftSpace} borderWidth={borderWidth} greyed={greyed} loading={loading}>\n            <Image src={src} rounded={rounded} width={wh} height={wh} bgColor={false} leftSpace={leftSpace} cursor={cursor} />\n        </WrapComponentStyles>\n    );\n};\n\nexport default Rune;","import { memo } from 'preact/compat';\nimport { useCallback, useState } from 'preact/hooks';\nimport useAsync from '../../../lib/hooks/use-async';\nimport { perkImage } from '../../../lib/helpers';\nimport { useTooltips } from '../../../lib/context/tooltips';\nimport { maybeFetchTooltip } from '../../../lib/tooltips';\nimport {\n    GameTooltip,\n    GameTooltipEmpty,\n} from '../game-tooltip';\n\nexport const PerkTooltip = ({ by = 'riotId', identifier = false }) => {\n\n    const { ttData, setTtData } = useTooltips();\n    const [localTooltip, setLocalTooltip] = useState(false);\n\n    //Set state of tooltip\n    const doSetLocalTooltipRes = (ttRes) => {\n        if (ttRes && !localTooltip) {\n            setLocalTooltip(ttRes)\n        }\n    };\n\n    const setLocalTooltipRes = useCallback((ttRes) => {\n        doSetLocalTooltipRes(ttRes);\n    }, []);\n    //Get the tooltip\n    const doTooltip = useCallback(async () => {\n        //Only get it if there's a identifier set\n        if (identifier) {\n            return await maybeFetchTooltip('perk', by, identifier, ttData, setTtData);\n        }\n    }, [identifier]);\n\n    useAsync(doTooltip, setLocalTooltipRes);\n\n    return localTooltip ? (\n        <GameTooltip\n            name={localTooltip.name}\n            iconName={localTooltip.name}\n            iconUrl={perkImage(identifier)}\n            description={localTooltip.longDescription || localTooltip.shortDescription || localTooltip.customDescription}\n        />\n    ) : (\n        <GameTooltipEmpty />\n    );\n};\n\nexport default memo(PerkTooltip);","import { memo } from 'preact/compat';\nimport { useCallback } from 'preact/hooks';\nimport PerkTooltip from '../perk-tooltip';\nimport { TransparentTooltip } from '../../../styles/components/transparent-tooltip';\n\nconst PerkTooltipWrapper = ({ by, identifier, children }) => {\n\n    const tooltipFn = useCallback(() => <PerkTooltip by={by} identifier={identifier} />, [identifier]);\n\n    return (\n        <>\n            {identifier && (\n                <TransparentTooltip tooltipFn={tooltipFn}>\n                    <span style=\"z-index: 10;\">{children}</span>\n                </TransparentTooltip>\n            )}\n            {!identifier && children}\n        </>\n    );\n};\n\nexport default memo(PerkTooltipWrapper);"],"sourceRoot":""}